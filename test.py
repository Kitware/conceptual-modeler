#!/usr/bin/env python

import vtk


def main():
    colors = vtk.vtkNamedColors()

    reader = vtk.vtkXMLImageDataReader()
    reader.SetFileName("/Users/olearypatrick/Desktop/Data/Rock/newrock.vti")
    reader.Update()

    imageData = reader.GetOutput()

    print(imageData.GetDimensions(),imageData.GetSpacing(),imageData.GetOrigin())

    filter_threshold = vtk.vtkThreshold()
    filter_threshold.SetInputData(imageData)
    filter_threshold.ThresholdByUpper(0.5)
    filter_threshold.Update()

    extractSkinFilter = vtk.vtkGeometryFilter()
    extractSkinFilter.SetInputData(filter_threshold.GetOutput())
    extractSkinFilter.Update()

    lut = vtk.vtkLookupTable()
    lut.SetNumberOfColors(256)
    lut.SetHueRange(0.0, 0.667)
    lut.Build()
    mapper = vtk.vtkDataSetMapper()
    mapper.SetLookupTable(lut)
    mapper.SetInputConnection(filter_threshold.GetOutputPort())
    mapper.SetScalarRange(imageData.GetScalarRange())
    mapper.SetScalarModeToUseCellData()
    mapper.SetColorModeToMapScalars()

    actor = vtk.vtkActor()
    actor.SetMapper(mapper)

    # This creates an outline around the data.

    outline = vtk.vtkOutlineFilter()
    outline.SetInputData(imageData)

    outlineMapper = vtk.vtkPolyDataMapper()
    outlineMapper.SetInputConnection(outline.GetOutputPort())

    outlineActor = vtk.vtkActor()
    outlineActor.SetMapper(outlineMapper)

    bounds = imageData.GetBounds()
    axes = vtk.vtkCubeAxesActor()
    axes.SetBounds( bounds[0], bounds[1], bounds[2], bounds[3], bounds[4], bounds[5])
    axes.SetXLabelFormat("%6.1f")
    axes.SetYLabelFormat("%6.1f")
    axes.SetZLabelFormat("%6.1f")
    axes.SetFlyModeToOuterEdges()

    # Much of the following is commented out. To try different lookup tables,
    # uncomment the appropriate portions.
    #

    # This creates a black to white lut.
    # lut.SetHueRange(0, 0)
    # lut.SetSaturationRange(0, 0)
    # lut.SetValueRange(0.2, 1.0)

    # This creates a red to blue lut.
    # lut.SetHueRange(0.0, 0.667)

    # This creates a blue to red lut.
    # lut.SetHueRange(0.667, 0.0)

    # This creates a weird effect. The Build() method causes the lookup table
    # to allocate memory and create a table based on the correct hue, saturation,
    # value, and alpha (transparency) range. Here we then manually overwrite the
    # values generated by the Build() method.
    

    # Create the RenderWindow, Renderer and both Actors.
    #
    ren1 = vtk.vtkRenderer()
    renWin = vtk.vtkRenderWindow()
    renWin.AddRenderer(ren1)
    iren = vtk.vtkRenderWindowInteractor()
    iren.SetRenderWindow(renWin)

    # Add the actors to the renderer, set the background and size.
    #
    ren1.AddActor(outlineActor)
    ren1.AddActor(actor)

    # ren1.SetBackground(colors.GetColor3d('SlateGray'))
    # ren1.TwoSidedLightingOff()

    renWin.SetSize(512, 512)
    renWin.SetWindowName('Rainbow')

    iren.Initialize()

    cam1 = ren1.GetActiveCamera()
    cam1.SetClippingRange(3.95297, 50)
    cam1.SetFocalPoint(8.88908, 0.595038, 29.3342)
    cam1.SetPosition(-12.3332, 31.7479, 41.2387)
    cam1.SetViewUp(0.060772, -0.319905, 0.945498)

    axes.SetCamera(cam1)
    ren1.AddViewProp(axes)

    iren.Start()

if __name__ == '__main__':
    main()